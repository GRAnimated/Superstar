/**
 * @file util.h
 * @brief Functions used for getting button input and recording.
 */

#pragma once

#include "types.h"
#include "sead/color.h"

namespace al
{
    class ReplayController;

    bool isPadTrigger(s32, s32);
    bool isPadTriggerA(s32 port);
    bool isPadTriggerB(s32 port);
    bool isPadTriggerX(s32 port);
    bool isPadTriggerY(s32 port);
    bool isPadTriggerZL(s32 port);
    bool isPadTriggerZR(s32 port);
    bool isPadTriggerL(s32 port);
    bool isPadTriggerR(s32 port);
    bool isPadTrigger1(s32 port);
    bool isPadTrigger2(s32 port);
    bool isPadTriggerUp(s32 port);
    bool isPadTriggerDown(s32 port);
    bool isPadTriggerLeft(s32 port);
    bool isPadTriggeredRight(s32 port);
    bool isPadTriggeredLeftUp(s32 port);
    bool isPadTriggeredLeftDown(s32 port);
    bool isPadTriggeredRightUp(s32 port);
    bool isPadTriggeredRightDown(s32 port);
    bool isPadTriggeredHome(s32 port);
    bool isPadTriggeredStart(s32 port);
    bool isPadTriggeredSelect(s32 port);
    bool isPadTriggeredPlus(s32 port);
    bool isPadTriggeredMinus(s32 port);
    bool isPadTriggerTouch();
    bool isPadTriggerUpLeftStick(s32 port);
    bool isPadTriggerDownLeftStick(s32 port);
    bool isPadTriggerLeftLeftStick(s32 port);
    bool isPadTriggerRightLeftStick(s32 port);
    bool isPadTriggerUpRightStick(s32 port);
    bool isPadTriggerDownRightStick(s32 port);
    bool isPadTriggerLeftRightStick(s32 port);
    bool isPadTriggerRightRightStick(s32 port);
    bool isPadTriggerAnyABXY(s32 port);
    bool isPadTriggerAny(s32 port);
    bool isPadTriggerLeftStick(s32 port);
    bool isPadTriggerRightStick(s32 port);
    bool isPadTriggerPressLeftStick(s32 port);
    bool isPadTriggerPressRightStick(s32 port);
    bool isPadHoldPressLeftStick(s32 port);
    bool isPadHoldPressRightStick(s32 port);
    void setPadRepeat(s32, s32, s32, s32);
    bool isPadRepeatA(s32 port);
    bool isPadRepeatB(s32 port);
    bool isPadRepeatX(s32 port);
    bool isPadRepeatY(s32 port);
    bool isPadRepeatZL(s32 port);
    bool isPadRepeatZR(s32 port);
    bool isPadRepeatL(s32 port);
    bool isPadRepeatR(s32 port);
    bool isPadRepeat1(s32 port);
    bool isPadRepeat2(s32 port);
    bool isPadRepeatUp(s32 port);
    bool isPadRepeatDown(s32 port);
    bool isPadRepeatLeft(s32 port);
    bool isPadRepeatRight(s32 port);
    bool isPadRepeatLeftUp(s32 port);
    bool isPadRepeatLeftDown(s32 port);
    bool isPadRepeatRightUp(s32 port);
    bool isPadRepeatRightDown(s32 port);
    bool isPadRepeatHome(s32 port);
    bool isPadRepeatStart(s32 port);
    bool isPadRepeatSelect(s32 port);
    bool isPadRepeatPlus(s32 port);
    bool isPadRepeatMinus(s32 port);
    bool isPadRepeatTouch();
    bool isPadRepeatUpLeftStick(s32 port);
    bool isPadRepeatDownLeftStick(s32 port);
    bool isPadRepeatLeftLeftStick(s32 port);
    bool isPadRepeatRightLeftStick(s32 port);
    bool isPadRepeatUpRightStick(s32 port);
    bool isPadRepeatDownRightStick(s32 port);
    bool isPadRepeatLeftRightStick(s32 port);
    bool isPadRepeatRightRightStick(s32 port);
    bool isPadHoldA(s32 port);
    bool isPadHoldB(s32 port);
    bool isPadHoldX(s32 port);
    bool isPadHoldY(s32 port);
    bool isPadHoldZL(s32 port);
    bool isPadHoldZR(s32 port);
    bool isPadHoldL(s32 port);
    bool isPadHoldR(s32 port);
    bool isPadHold1(s32 port);
    bool isPadHold2(s32 port);
    bool isPadHoldUp(s32 port);
    bool isPadHoldDown(s32 port);
    bool isPadHoldLeft(s32 port);
    bool isPadHoldRight(s32 port);
    bool isPadHoldLeftUp(s32 port);
    bool isPadHoldLeftDown(s32 port);
    bool isPadHoldRightUp(s32 port);
    bool isPadHoldRightDown(s32 port);
    bool isPadHoldHome(s32 port);
    bool isPadHoldStart(s32 port);
    bool isPadHoldSelect(s32 port);
    bool isPadHoldPlus(s32 port);
    bool isPadHoldMinus(s32 port);
    bool isPadHoldAny(s32 port);
    bool isPadHoldAnyWithoutStick(s32 port);
    bool isPadHoldAnyWithoutStickPush(s32 port);
    bool isPadHoldTouch();
    bool isPadHoldUpLeftStick(s32 port);
    bool isPadHoldDownLeftStick(s32 port);
    bool isPadHoldLeftLeftStick(s32 port);
    bool isPadHoldRightLeftStick(s32 port);
    bool isPadHoldUpRightStick(s32 port);
    bool isPadHoldDownRightStick(s32 port);
    bool isPadHoldLeftRightStick(s32 port);
    bool isPadHoldRightRightStick(s32 port);
    bool isPadHoldLeftStick(s32 port);
    bool isPadHoldRightStick(s32 port);
    bool isPadReleaseA(s32 port);
    bool isPadReleaseB(s32 port);
    bool isPadReleaseX(s32 port);
    bool isPadReleaseY(s32 port);
    bool isPadReleaseZL(s32 port);
    bool isPadReleaseZR(s32 port);
    bool isPadReleaseL(s32 port);
    bool isPadReleaseR(s32 port);
    bool isPadRelease1(s32 port);
    bool isPadRelease2(s32 port);
    bool isPadReleaseUp(s32 port);
    bool isPadReleaseDown(s32 port);
    bool isPadReleaseLeft(s32 port);
    bool isPadReleaseRight(s32 port);
    bool isPadReleaseLeftUp(s32 port);
    bool isPadReleaseLeftDown(s32 port);
    bool isPadReleaseRightUp(s32 port);
    bool isPadReleaseRightDown(s32 port);
    bool isPadReleaseHome(s32 port);
    bool isPadReleaseStart(s32 port);
    bool isPadReleaseSelect(s32 port);
    bool isPadReleasePlus(s32 port);
    bool isPadReleaseMinus(s32 port);
    bool isPadReleaseTouch();
    bool isPadReleaseUpLeftStick(s32 port);
    bool isPadReleaseDownLeftStick(s32 port);
    bool isPadReleaseLeftLeftStick(s32 port);
    bool isPadReleaseRightLeftStick(s32 port);
    bool isPadReleaseUpRightStick(s32 port);
    bool isPadReleaseDownRightStick(s32 port);
    bool isPadReleaseLeftRightStick(s32 port);
    bool isPadReleaseRightRightStick(s32 port);

    bool isPadTypeJoySingle(s32 port);
    bool isPadTypeJoyDual(s32 port);
    bool isPadTypeJoyLeft(s32 port);
    bool isPadTypeJoyRight(s32 port);
    bool isPadTypeHandheld(s32 port);
    bool isPadTypeFullKey(s32 port);
    void tryGetPadColor(sead::Color4f *, sead::Color4f *, sead::Color4f *, sead::Color4f *, s32 port);
    bool isEitherPadHoldA();
    bool isEitherPadHoldB();
    // there's a few functions here but meh
    al::ReplayController* createReplayController(u32);
    void unregistReplayController(u32);
    al::ReplayController* getReplayController(u32);
    void startPadReplay(u32);
    void pausePadReplay(u32);
    void endPadReplay(u32);
    void startPadRecording(u32);
    void endPadRecording(u32);
    bool isPadReplaying(u32);
    u32 getPadReplayRemainFrame(u32);
    bool isPadRecording(u32);
    void invalidatePadReplay(u32);
    void validatePadReplay(u32);
    bool isValidReplayController(u32);
    bool isReadPadReplayData(u32);
};